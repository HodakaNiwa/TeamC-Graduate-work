//=============================================================================
//
// GUI処理 [GUI.cpp]
// Author : 佐藤安純 Sato_Asumi
//
//=============================================================================
#include "GUI.h"
#include "manager.h"
#include "renderer.h"
//#include <string>
#include <atlconv.h>

//=============================================================================
//	静的メンバ変数宣言
//=============================================================================
bool CGui::m_bDrawGui = true;
bool CGui::m_bUseGui = false;

//=============================================================================
//	コンストラクタ
//=============================================================================
CGui::CGui(){}

//=============================================================================
// デストラクタ
//=============================================================================
CGui::~CGui(){}

//=============================================================================
//	Imguiのセットアップ
//=============================================================================
void CGui::SetUp(HWND hWnd)
{
	//レンダラーの取得
	CRenderer * pRenderer = CManager::GetRenderer();

	// Imguiのセットアップ
	IMGUI_CHECKVERSION();
	ImGui::CreateContext();

	// スタイルの設定
	//ImGui::StyleColorsDark();						//バックグラウンドが濃い
	ImGui::StyleColorsClassic();					//バッググラウンドが半透明

	// レンダラーのブレンディング設定
	ImGui_ImplWin32_Init(hWnd);						//Windowを設定する
	ImGui_ImplDX9_Init(pRenderer->GetDevice());		//DirectXを設定する

	//フォントの取得
	ImGuiIO& io = ImGui::GetIO();
	io.Fonts->AddFontFromFileTTF("c:\\Windows\\Fonts\\HGRSGU.TTC", 18.0f, NULL, io.Fonts->GetGlyphRangesJapanese());
}

//=============================================================================
//	Imguiの破棄
//=============================================================================
void CGui::Teardown(void)
{
	ImGui_ImplWin32_Shutdown();		//ImGuiのWindowsの開放
	ImGui_ImplDX9_Shutdown();		//ImGuiのDirectXの開放
	ImGui::DestroyContext();		//ImGuiを破棄する
}

//=============================================================================
//	Imguiの描画
//=============================================================================
void CGui::Renderer(void)
{
	if (!m_bUseGui) { return; }		//使用状態かどうか
	if (!m_bDrawGui) { return; }	//GUIを描画するかどうか

	ImGui::EndFrame();										//フレームの終了
	ImGui::Render();										//描画処理
	ImGui_ImplDX9_RenderDrawData(ImGui::GetDrawData());		//データの取得
}

#if 0
//=============================================================================
// 初期化処理
//=============================================================================
void CGui::Init(void)
{
}

//=============================================================================
// 終了処理
//=============================================================================
void CGui::Uninit(void)
{
}

//=============================================================================
// 更新処理
//=============================================================================
void CGui::Update(void)
{
	// imgui毎フレーム処理
	ImGui_ImplDX9_NewFrame();
	ImGui_ImplWin32_NewFrame();
	ImGui::NewFrame();

	ImGui::Begin(u8"デバッグウインドウ");		//ウインドウ名
	ImGui::Text("FPS : %d", GetFPS());			//FPSの取得

	ImGui::End();	//ウインドウの書き込みの終了

	//ウインドウの設定処理
	bool m_bDemoWindow = true;					//デモウインドウのフラグ
	ImGui::ShowDemoWindow(&m_bDemoWindow);		//デモウインドウの生成
}
#endif

//=============================================================================
//	int型の最小値修正
//=============================================================================
void CGui::RetouchMinimumInt(int * nRetouch, int nMinimum)
{
	if (*nRetouch < nMinimum)
	{
		*nRetouch = nMinimum;
	}
}

//=============================================================================
//	float型の最小値修正
//=============================================================================
void CGui::RetouchMinimumFloat(float * fRetouch, float fMinimum)
{
	if (*fRetouch < fMinimum)
	{
		*fRetouch = fMinimum;
	}
}