//*****************************************************************************
//
//     シェーダーの処理[shader.cpp]
//     Auther:Hodaka Niwa
//
//*****************************************************************************
#include "shader.h"
#include "manager.h"

//*****************************************************************************
//     マクロ定義
//*****************************************************************************


//*****************************************************************************
//    静的メンバ変数宣言
//*****************************************************************************

//=============================================================================
//    コンストラクタ
//=============================================================================
CShader::CShader(char *pFileName)
{
	m_pEffect = NULL;
	m_hTechnique = 0;
	strcpy(m_pFileName, pFileName);
}

//=============================================================================
//    デストラクタ
//=============================================================================
CShader::~CShader()
{

}

//=============================================================================
//    レンダリング開始宣言
//=============================================================================
HRESULT CShader::Begin(void)
{
	if (m_pEffect != NULL)
	{
		m_pEffect->SetTechnique(m_hTechnique);
		m_pEffect->Begin(NULL, 0);
	}

	return S_OK;
}

//=============================================================================
//    レンダリング終了宣言
//=============================================================================
HRESULT CShader::End(void)
{
	if (m_pEffect == NULL) { return E_FAIL; }

	// 終了宣言
	m_pEffect->End();

	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetDevice();
	if (pDevice == NULL) { return E_FAIL; }

	// 頂点シェーダーとピクセルシェーダーへのポインタを空にする
	pDevice->SetVertexShader(NULL);
	pDevice->SetPixelShader(NULL);

	return S_OK;
}

//=============================================================================
//    レンダリングパス開始宣言
//=============================================================================
HRESULT CShader::BeginPass(int nIdx)
{
	if (m_pEffect != NULL)
	{
		m_pEffect->BeginPass(nIdx);
	}
	return S_OK;
}

//=============================================================================
//    レンダリングパス終了宣言
//=============================================================================
HRESULT CShader::EndPass(void)
{
	if (m_pEffect != NULL)
	{
		m_pEffect->EndPass();
	}
	return S_OK;
}

//=============================================================================
//    値の変更をお知らせ(レンダリングパスが開始されている時は必ず呼ぶこと！)
//=============================================================================
HRESULT CShader::CommitChanges(void)
{
	if (m_pEffect != NULL)
	{
		m_pEffect->CommitChanges();
	}

	return S_OK;
}

//=============================================================================
//    ファイル名設定処理
//=============================================================================
void CShader::SetFileName(char *pFileName)
{
	strcpy(m_pFileName, pFileName);
}