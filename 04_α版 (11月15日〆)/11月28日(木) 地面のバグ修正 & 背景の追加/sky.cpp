//*****************************************************************************
//
//     空の処理[sky.cpp]
//     Auther:Hodaka Niwa
//
//*****************************************************************************
#include "sky.h"
#include "manager.h"
#include "library.h"

//*****************************************************************************
//     マクロ定義
//*****************************************************************************


//*****************************************************************************
//    静的メンバ変数宣言
//*****************************************************************************


//=============================================================================
//    コンストラクタ
//=============================================================================
CSky::CSky(int nPriority, OBJTYPE objType) : CMeshSphere(nPriority, objType)
{

}

//=============================================================================
//    デストラクタ
//=============================================================================
CSky::~CSky()
{

}

//=============================================================================
//    生成処理
//=============================================================================
CSky *CSky::Create(D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXCOLOR col, float fRadius, int nXBlock, int nYBlock, int nPriority)
{
	// メモリ確保
	CSky *pSky = NULL;
	pSky = new CSky(nPriority);
	if (pSky == NULL)
	{
		return NULL;
	}

	// 各種値の代入
	pSky->SetPos(pos);         // メッシュスフィアの座標
	pSky->SetRot(rot);         // メッシュスフィアの向き
	pSky->SetCol(col);         // メッシュスフィアの色
	pSky->SetRadius(fRadius);  // メッシュスフィアの半径
	pSky->SetXBlock(nXBlock);  // 横の分割数
	pSky->SetYBlock(nYBlock);  // 縦の分割数

	// 初期化処理
	if (FAILED(pSky->Init()))
	{
		pSky->Uninit();
		return NULL;
	}

	return pSky;
}

//=============================================================================
//    初期化処理
//=============================================================================
HRESULT CSky::Init(void)
{
	if (FAILED(CMeshSphere::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//=============================================================================
//    終了処理
//=============================================================================
void CSky::Uninit(void)
{
	CMeshSphere::Uninit();
}

//=============================================================================
//    更新処理
//=============================================================================
void CSky::Update(void)
{

}

//=============================================================================
//    描画処理
//=============================================================================
void CSky::Draw(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();
	if (pDevice == NULL) { return; }

	// ライティングをしない設定に
	DWORD Lighting;
	pDevice->GetRenderState(D3DRS_LIGHTING, &Lighting);
	pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

	// 共通の描画処理
	CMeshSphere::Draw();

	// ライティングの設定を戻す
	pDevice->SetRenderState(D3DRS_LIGHTING, Lighting);
}