//=============================================================================
//
// ひび割れ処理 [crack.cpp]
// Author : 佐藤安純 Sato_Asumi
//
//=============================================================================
#include "crack.h"
#include "manager.h"
#include "renderer.h"
#include "game.h"
#include "camera.h"
#include "fieldmanager.h"

//=============================================================================
// マクロ定義
//=============================================================================
#define SIZE		(D3DXVECTOR3(200.0f, 0.0f, 200.0f))
#define LIFE		(60 * 3)
#define TEX_NAME	("data/TEXTURE/game/crack.png")
#define UV			(0.2f)
#define MAX_PATTEN	(5)

//=============================================================================
// 前方宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CCrack::m_pTexture = NULL;

//=============================================================================
// 生成処理
//=============================================================================
CCrack * CCrack::Create(const D3DXVECTOR3 pos)
{
	//インスタンスの生成
	CCrack * pField;
	pField = new CCrack;

	//初期化処理
	pField->Init();

	//設定処理
	pField->Set(pos, SIZE);
	pField->BindTexture(m_pTexture);
	pField->SetColor(D3DXCOLOR(1.0f, 1.0f, 1.0f, 0.75f));

	return pField;
}

//=============================================================================
// コンストラクタ
//=============================================================================
CCrack::CCrack() : CScene3D(10, OBJTYPE_GRANDEFFECT){}

//=============================================================================
// コンストラクタ
//=============================================================================
CCrack::CCrack(int nPriority, CScene::OBJTYPE obj) : CScene3D(nPriority, obj){}

//=============================================================================
// デストラクタ
//=============================================================================
CCrack::~CCrack(){}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CCrack::Init(void)
{
	CScene3D::Init();

	//変数の初期化
	m_nLife = LIFE;		//表示時間
	m_bDeth = false;	//死亡フラグ
	m_nCountTime = 0;	//カウンター
	m_nPattern = 0;		//パターン数

	//UVの設定
	CScene3D::SetTexUV(0.0f + (m_nPattern * UV), 1.0f, UV + (m_nPattern * UV), 0.0f);

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CCrack::Uninit(void)
{
	CScene3D::Uninit();
}

//=============================================================================
// 更新処理
//=============================================================================
void CCrack::Update(void)
{
	CScene3D::Update();

	//カウンターを進める
	m_nCountTime++;

	if ((m_nCountTime % 6) == 0)
	{
		m_nPattern++;

		if (m_nPattern >= MAX_PATTEN) { m_nPattern = MAX_PATTEN - 1; }

		//UV値の設定
		CScene3D::SetTexUV(0.0f + (m_nPattern * UV), 1.0f, UV + (m_nPattern * UV), 0.0f);
	}

	if (m_nPattern == MAX_PATTEN - 1)
	{
		//表示時間を減らす
		m_nLife--;

		if (m_nLife < 0)
		{
			//透明度を下げる
			D3DXCOLOR col = CScene3D::GetCol();
			col.a -= 0.02f;

			if (col.a < 0.0f)
			{//α値のチェック
				col.a = 0.0f;
				m_bDeth = true;
			}

			//色を設定する
			CScene3D::SetColor(col);
		}
	}

	//死亡フラグが有効だったら破棄
	if (m_bDeth) { Uninit(); }
}

//=============================================================================
// 描画処理
//=============================================================================
void CCrack::Draw(void)
{
	CScene3D::Draw();
}

//=============================================================================
// テクスチャの読み込み
//=============================================================================
void CCrack::LoadTex(void)
{
	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	//テクスチャ読み込み
	D3DXCreateTextureFromFile(pDevice, TEX_NAME, &m_pTexture);	//爆発跡
}

//=============================================================================
// テクスチャの破棄
//=============================================================================
void CCrack::UnloadTex(void)
{
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}